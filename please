#!/usr/bin/env bash

set -euo pipefail

# Set variables
GO="go"
LDFLAGS='-w -s'
BUILD_DIR="./build"
APP_BIN="$BUILD_DIR/namemyserver"
APP_VERSION="0.1.0"
COVERAGE_FILE="$BUILD_DIR/coverage.out"

# Source .env file if it exists
if [ -f .env ]; then
    set -a
    source .env
    set +a
fi


help() {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | sed 's/^/\t/'
}

default() {
    help
}

install_tools() { ## installs tools required for development and building the project
    require:air
    require:templ
    require:golangci-lint
    require:dbmate
}

require:air() {
    install_if_missing "air" "github.com/air-verse/air@v1.61.7"
}

require:templ() {
    install_if_missing "templ" "github.com/a-h/templ/cmd/templ@v0.3.833"
}

require:golangci-lint() {
    install_if_missing "golangci-lint" "github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.2"
}

require:dbmate() {
    local cmd="dbmate"
    local version="v2.26.0"
    if ! command -v "$cmd" &>/dev/null; then
        echo "Installing $cmd..."
        curl -fsSL -o ~/.local/bin/dbmate https://github.com/amacneil/dbmate/releases/download/${version}/dbmate-linux-amd64 && chmod +x ~/.local/bin/dbmate
    fi
}

## Function to check if a command exists before installing
install_if_missing() {
    local cmd="$1"
    local install_pkg="$2"

    if ! command -v "$cmd" &>/dev/null; then
        echo "Installing $cmd..."
        go install $install_pkg
    else
        echo "$cmd is already installed, skipping."
    fi
}

build() { ## builds namemyserver's binary for production use in the current machine's architecture
    mkdir -p "$BUILD_DIR"
    $GO build -ldflags="$LDFLAGS" -v -o "$APP_BIN" ./cmd
}

generate() { ## runs all code generation targets
    require:templ
    templ generate
}

test() { ## runs all namemyserver tests
    $GO test ./...
}

coverage() { ## tests namemyserver codebase and generates a coverage file
    mkdir -p "$BUILD_DIR"
    $GO test -coverprofile="$COVERAGE_FILE" ./...
}

see_coverage() { ## showcases the coverage in a browser using html output
    coverage
    $GO tool cover -html="$COVERAGE_FILE"
}

clean() { ## removes build assets generated by the build target from the system
    rm -rf "$BUILD_DIR"/*
}

lint() { ## detects flaws in the code and checks for style
    require:golangci-lint
    golangci-lint run
}

format() { ## formats the codebase using golangci-lint linters
    require:golangci-lint
    require:templ
    golangci-lint run --fix
    templ fmt ./internal/templates
}

docker() { ## builds the application's docker image
    docker build --no-cache --progress=plain -t "davidonium/namemyserver:$APP_VERSION" .
    docker tag "davidonium/namemyserver:$APP_VERSION" "davidonium/namemyserver:latest"
}

db:migrate() { ## applies database migrations
    require:dbmate
    dbmate up
}

db:reset() { ## recreates the current database and applies migrations, useful for development (WARN: destroys data)
    require:dbmate
    dbmate drop
    dbmate create
    dbmate up
}

dev() { ## launches the app with support for live reload of the server on file change
    require:air
    air
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-default}
